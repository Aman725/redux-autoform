import React, {Component, PropTypes} from 'react'
import {reduxForm} from 'redux-form';
import metadataEvaluator from './lib/metadataEvaluator';
import modelParser from './lib/modelParser';
import { ButtonToolbar, Button, Form } from 'react-bootstrap';

class AutoFormInternal extends Component {

    render() {

        let {
            componentFactory,
            fields, // this is not the fields passed from AutoForm. This is generated by ReduxForm. This object has a property for each field. Each property contains all redux props for the given field
            fieldMetadata,
            layout,
            handleSubmit,
            submitting,
            buttonBar,
            fieldLayout
        } = this.props;

        let model = this.props.values;
        let modelProcessed = modelParser.process(model, fieldMetadata);
        let fieldMetadataEvaluated = metadataEvaluator.evaluate(fieldMetadata, modelProcessed, '', fields);

        let groupComponent = componentFactory.buildGroupComponent({
            component: layout.component,
            layout: layout,
            fields: fieldMetadataEvaluated,
            componentFactory: componentFactory
        });

        return (
            <div className="meta-form">
                <Form onSubmit={handleSubmit} horizontal={fieldLayout == 'inline'}>
                    { groupComponent }
                    { React.createElement(buttonBar, { submitting: submitting }) }
                </Form>
            </div>
        )
    }
}

AutoFormInternal.propTypes = {
    fields: PropTypes.object.isRequired,
    handleSubmit: PropTypes.func.isRequired,
    resetForm: PropTypes.func.isRequired,
    submitting: PropTypes.bool.isRequired,
    componentFactory: PropTypes.object.isRequired,
    entity: PropTypes.object.isRequired,
    layout: PropTypes.object,
    buttonBar: PropTypes.func.isRequired,
    fieldLayout: PropTypes.string
};

export default reduxForm()(AutoFormInternal);